name: Deploy Packer Template on Merge

on:
  push:
    branches:
      - dev
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.6/packer_1.8.6_linux_amd64.zip
          unzip packer_1.8.6_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          packer --version
        shell: bash

      - name: Initialize Packer Plugins
        run: packer init ./packer_templates/.

      # - name: Edit .env file
      #   run: |
      #     touch .env
      #     echo DB_NAME=${{ secrets.DB_NAME }} >> .env
      #     echo DB_USER=${{ secrets.WEBAPP_DB_USER}} >> .env
      #     echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
      #     echo DB_HOST=${{ secrets.DB_HOST }} >> .env
      #     echo DB_DIALECT=${{ secrets.DB_DIALECT }} >> .env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION}}

      - name: Zip Project Files
        run: zip -r webapp.zip . --exclude=*.git*

      - name: Deploy Packer Template
        run: packer build ./packer_templates/.

      - name: Configure DEMO AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create New Launch Template Version and Update Autoscaling Group
        run: |
          LATEST_AMI_ID=$(aws ec2 describe-images --owners "781104868468" --filters "Name=name,Values=my-packer-aws-debian*" --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
          echo "Latest AMI ID: $LATEST_AMI_ID"
          NEW_LT_VERSION=$(aws ec2 create-launch-template-version --launch-template-id ${{ vars.LAUNCH_TEMP_ID }} --source-version 1 --launch-template-data  '{"ImageId":"'$LATEST_AMI_ID'"}' --query 'LaunchTemplateVersion.VersionNumber' --output text)
          echo "New Launch Template Version: $NEW_LT_VERSION"
          aws ec2 modify-launch-template --launch-template-id ${{ vars.LAUNCH_TEMP_ID }} --default-version $NEW_LT_VERSION
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${{ vars.AS_GROUP_NAME }} --launch-template "LaunchTemplateId=${{vars.LAUNCH_TEMP_ID}},Version=$NEW_LT_VERSION"
          INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ vars.AS_GROUP_NAME }} --strategy Rolling --query 'InstanceRefreshId' --output text)
          echo "Instance Refresh ID: $INSTANCE_REFRESH_ID"
          sleep 20

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ vars.AS_GROUP_NAME }} --instance-refresh-ids $INSTANCE_REFRESH_ID --query 'InstanceRefreshes[0].Status' --output text)
            sleep 10
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              exit 0
            elif [ "$STATUS" = "Cancelled" ]; then
              echo "Instance refresh failed"
              exit 1
            fi
          done
